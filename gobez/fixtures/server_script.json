[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-08 20:44:30.890616",
  "module": "Gobez Academy LMS",
  "name": "New Registration Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Registration",
  "script": "\n#serverside\n#Get all required fields from the document\nrole = doc.i_am\nname = doc.name\ntotal = doc.total\npname = doc.parent_name\npmail = doc.parent_email\npuser = doc.parent_username\n\n    \n#smail = doc.student_email\nsuser = doc.student_username\nsname = doc.student_name\n#spass = doc.student_password\ngrade = doc.grade\nsubscription = doc.subscription\nif role == \"Parent\":\n    ppass = doc.get_password(\"parent_password\")\n    spass = doc.get_password(\"student_password\")\n    smail = f\"{suser}@gobezacademy.com\"\n    \nelse:\n    spass = doc.get_password(\"student_password\")\n    smail =doc.student_email\n# Parent Registration with student\nif role == \"Parent\":\n    # Check if users already exist\n    parent_exists = frappe.db.exists(\"User\", pmail) or frappe.db.exists(\"User\", {\"username\": puser})\n    student_exists = frappe.db.exists(\"User\", smail) or frappe.db.exists(\"User\", {\"username\": suser})\n    \n    if not parent_exists and not student_exists:\n        try:\n            # Create Parent User\n            p_user = frappe.get_doc({\n                \"doctype\": \"User\",\n                \"email\": pmail,\n                \"first_name\": pname,\n                \"username\": puser,\n                \"new_password\": ppass,\n                \"enabled\": 1,\n                \"role_profile_name\": \"Parent\",\n                \"user_type\": \"Website User\"\n            })\n            p_user.db_insert()\n            upd = frappe.get_doc(\"User\",p_user.email)\n            upd.notifications = 1\n            upd.save(ignore_permissions=True)\n            \n            # Create Student User\n            s_user = frappe.get_doc({\n                \"doctype\": \"User\",\n                \"email\": smail,\n                \"first_name\": sname,\n                \"username\": suser,\n                \"new_password\": spass,\n                \"enabled\": 1,\n                \"role_profile_name\": \"Student\",\n                \"user_type\": \"Website User\"\n            })\n            s_user.db_insert()\n            upds = frappe.get_doc(\"User\",s_user.email)\n            upds.notifications = 1\n            upds.save(ignore_permissions=True)\n            \n            email = pmail\n            first_name = pname\n            frappe.msgprint(f\"Users created for Parent {pname} and Student {sname}\")\n        except Exception as e:\n            frappe.throw(f\"Error creating users: {str(e)}\")\n    else:\n        frappe.msgprint(\"A user with this email and/or username already exists. Please change your Username and/or Email\")\n        frappe.throw(\"Registration failed\")\n\n# Solo Student Registration\nelif role == \"Student\":\n    student_exists = frappe.db.exists(\"User\", smail) or frappe.db.exists(\"User\", {\"username\": suser})\n    \n    if not student_exists:\n        try:\n            s_user = frappe.get_doc({\n                \"doctype\": \"User\",\n                \"email\": smail,\n                \"first_name\": sname,\n                \"username\": suser,\n                \"new_password\": spass,\n                \"enabled\": 1,\n                \"role_profile_name\": \"Student\",\n                \"user_type\": \"Website User\"\n            })\n            s_user.db_insert()\n            upds = frappe.get_doc(\"User\",s_user.email)\n            upds.notifications = 1\n            upds.save(ignore_permissions=True)\n            email = smail\n            first_name = sname\n            frappe.msgprint(f\"User created for Student {sname}\")\n        except Exception as e:\n            frappe.throw(f\"Error creating user: {str(e)}\")\n    else:\n        frappe.msgprint(\"A user with this email and/or username already exists.\")\n        frappe.throw(\"Registration failed\")\n\nelse:\n    frappe.throw(\"Invalid role specified\")\n\n# Payment initialization\ntry:\n    endpoint = \"https://api.chapa.co/v1/transaction/initialize\"\n    data = {\n        \"amount\": total,\n        \"currency\": \"ETB\",\n        \"tx_ref\": name,\n        \"first_name\": first_name,\n        \"callback_url\": \"https://lms.gobezacademy.com/\",\n        \"return_url\": \"https://lms.gobezacademy.com/login\"\n    }\n\n    # Check if Chapa Settings exists\n    if frappe.db.exists(\"DocType\", \"Chapa Settings\"):\n        secret = frappe.get_doc(\"Chapa Settings\").get_password(\"secret_key\")\n        headers = {\n            'Authorization': f'Bearer {secret}',\n            'Content-Type': 'application/json'\n        }\n\n        response = frappe.make_post_request(endpoint,headers=headers,data=json.dumps(data))        \n        if response.get(\"status\") == \"success\":\n            checkout_url = response[\"data\"].get(\"checkout_url\")\n            \n            # Create Registration record\n            docr = frappe.new_doc(\"Registration\")\n            docr.name = name\n            docr.checkout_url = checkout_url\n            # In your server-side code (after getting the checkout_url)\n            if role ==\"Student\":\n                docr.mail = smail\n                docr.student = smail\n            else:\n                docr.mail = pmail\n                docr.student = smail\n            docr.student = smail\n            #docr.mail = smail\n            docr.tx_ref = name\n            docr.role = role\n            docr.total = total\n            #docr.phone = phone\n            docr.batch = grade\n            docr.insert(ignore_permissions=True)\n            frappe.response['page_data'] = {\"checkout_url\": checkout_url}\n            #doc.checkout_url = checkout_url\n            #doc.db.insert()\n            frappe.msgprint(f\"Payment initialized. Checkout URL: {checkout_url}\")\n            #redirect_url = frappe.get_url(checkout_url)\n            \n            #frappe.get_url.checkout_url\n            #frappe.local.response[\"type\"] = \"redirect\"\n\t\t    #frappe.local.response[\"location\"] = checkout_url\n\t\t    \n        else:\n            frappe.throw(f\"Payment failed: {response.get('message', 'Unknown error')}\")\n    else:\n        frappe.throw(\"Chapa Settings not found. Please configure payment settings.\")\nexcept Exception as e:\n    frappe.throw(f\"Payment initialization failed: {str(e)}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-06 01:26:56.727363",
  "module": "Gobez Academy LMS",
  "name": "Registration Scrypt",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Registration",
  "script": "# Get all required fields from the document\nrole = doc.i_am\nname = doc.name\ntotal = doc.total\n \npname = doc.parent_name\npmail = doc.parent_email\npuser = doc.parent_username\nif i_am == \"Parent\":   \n    ppass = doc.get_password(\"parent_password\")\nsmail = doc.student_email\nsuser = doc.student_username\nsname = doc.student_name\n#spass = doc.student_password\nspass = doc.get_password(\"student_password\")\ngrade = doc.grade\nsubscription = doc.subscription\n\n# Parent Registration with student\nif role == \"Parent\":\n    # Check if users already exist\n    parent_exists = frappe.db.exists(\"User\", pmail) or frappe.db.exists(\"User\", {\"username\": puser})\n    student_exists = frappe.db.exists(\"User\", smail) or frappe.db.exists(\"User\", {\"username\": suser})\n    \n    if not parent_exists and not student_exists:\n        try:\n            # Create Parent User\n            p_user = frappe.get_doc({\n                \"doctype\": \"User\",\n                \"email\": pmail,\n                \"first_name\": pname,\n                \"username\": puser,\n                \"new_password\": ppass,\n                \"enabled\": 1,\n                \"role_profile_name\": \"Parent\",\n                \"user_type\": \"Website User\"\n            })\n            p_user.db_insert()\n            #because user is being created on db we need to make orm\n            upd = frappe.get_doc(\"User\",p_user.email)\n            upd.notifications = 1\n            upd.save(ignore_permissions=True)\n            # Create Student User\n            s_user = frappe.get_doc({\n                \"doctype\": \"User\",\n                \"email\": f\"{suser}@gobezacademy.com\",\n                \"first_name\": sname,\n                \"username\": suser,\n                \"new_password\": spass,\n                \"enabled\": 1,\n                \"role_profile_name\": \"Student\",\n                \"user_type\": \"Website User\"\n            })\n            s_user.db_insert()\n            upds = frappe.get_doc(\"User\",s_user.email)\n            upds.notifications = 1\n            upds.save(ignore_permissions=True)\n            email = pmail\n            first_name = pname\n            frappe.msgprint(f\"Users created for Parent {pname} and Student {sname}\")\n        except Exception as e:\n            frappe.throw(f\"Error creating users: {str(e)}\")\n    else:\n        frappe.msgprint(\"A user with this email and/or username already exists.\")\n        frappe.throw(\"Registration failed\")\n\n# Solo Student Registration\nelif role == \"Student\":\n    #role =\"LMS Student\"\n    student_exists = frappe.db.exists(\"User\", smail) or frappe.db.exists(\"User\", {\"username\": suser})\n    \n    if not student_exists:\n        try:\n            s_user = frappe.get_doc({\n                \"doctype\": \"User\",\n                \"email\": smail,\n                \"first_name\": sname,\n                \"username\":suser,\n                \"new_password\": spass,\n                #\"password\": spass,\n                \"enabled\": 1,\n                \"role_profile_name\":\"Student\",\n                \"user_type\": \"Website User\"\n                \n            })\n            s_user.db_insert()\n            upds = frappe.get_doc(\"User\",s_user.email)\n            upds.notifications = 1\n            upds.save(ignore_permissions=True)\n            \n            email = smail\n            first_name = sname\n            frappe.msgprint(f\"User created for Student {sname}\")\n        except Exception as e:\n            frappe.throw(f\"Error creating user: {str(e)}\")\n    else:\n        frappe.msgprint(\"A user with this email and/or username already exists.\")\n        frappe.throw(\"Registration failed\")\n\nelse:\n    frappe.throw(\"Invalid role specified\")\n\n# Payment initialization\ntry:\n    endpoint = \"https://api.chapa.co/v1/transaction/initialize\"\n    data = {\n        \"amount\": total,\n        \"currency\": \"ETB\",\n        \"tx_ref\": name,\n        \"first_name\": first_name,\n        \"callback_url\": \"https://lms.gobezacademy.com/api/method/verify-payment-student\",\n        \"return_url\": f\"http://lms.gobezacademy.com/lms/batches/\"\n    }\n\n    # Check if Chapa Settings exists\n    if frappe.db.exists(\"DocType\", \"Chapa Settings\"):\n        secret = frappe.get_doc(\"Chapa Settings\").get_password(\"secret_key\")\n        headers = {\n            'Authorization': f'Bearer {secret}',\n            'Content-Type': 'application/json'\n        }\n\n        response = frappe.make_post_request(endpoint,headers=headers,data=json.dumps(data))        \n        if response.get(\"status\") == \"success\":\n            checkout_url = response[\"data\"].get(\"checkout_url\")\n            \n            # Create Registration record\n            docr = frappe.new_doc(\"Registration\")\n            docr.name = name\n            docr.checkout_url = checkout_url\n            # In server-side code (after getting the checkout_url)\n            docr.mail = pmail\n            docr.student = smail\n            docr.tx_ref = name\n            docr.role = role\n            docr.total = total\n            #docr.phone = phone\n            docr.batch = grade\n            docr.insert(ignore_permissions=True)\n            frappe.response['page_data'] = {\"checkout_url\": checkout_url}\n            #doc.checkout_url = checkout_url\n            #doc.db.insert()\n            frappe.msgprint(f\"Payment initialized. Checkout URL: {checkout_url}\")\n            #redirect_url = frappe.get_url(checkout_url)\n            \n            #frappe.get_url.checkout_url\n            #frappe.local.response[\"type\"] = \"redirect\"\n                    #frappe.local.response[\"location\"] = checkout_url\n                    \n        else:\n            frappe.throw(f\"Payment failed: {response.get('message', 'Unknown error')}\")\n    else:\n        frappe.throw(\"Chapa Settings not found. Please configure payment settings.\")\nexcept Exception as e:\n    frappe.throw(f\"Payment initialization failed: {str(e)}\")",
  "script_type": "DocType Event"
 }
]